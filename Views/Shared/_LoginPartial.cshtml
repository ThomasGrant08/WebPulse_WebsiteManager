@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

@{
    var user = await UserManager.FindByIdAsync(UserManager.GetUserId(User));
    var role = await UserManager.GetUsersInRoleAsync("SystemOwner");
    var isOwner = role.Contains(user);
}


<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a  class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @(isOwner ? user.UserName : user.GetUsername()) <br/>
                <span>@StringExtensions.SpaceCamelCase(UserManager.GetRolesAsync(UserManager.FindByIdAsync(UserManager.GetUserId(User)).Result).Result.FirstOrDefault())</span>
            </a>
        
    </li>
    <li class="nav-item">
        <form  class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
